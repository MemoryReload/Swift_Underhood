sil_stage canonical

import Builtin
import Swift
import SwiftShims

import Foundation

class ToObjcOrNotObjc {
  func performOperation() -> Int
  @objc func performOcOperation() -> Int
  @objc dynamic func performDynamicOperation() -> Int
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue let q: ToObjcOrNotObjc { get }

// q
sil_global hidden [let] @$s4main1qAA011ToObjcOrNotC0Cvp : $ToObjcOrNotObjc

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s4main1qAA011ToObjcOrNotC0Cvp    // id: %2
  %3 = global_addr @$s4main1qAA011ToObjcOrNotC0Cvp : $*ToObjcOrNotObjc // users: %14, %11, %8, %7
  %4 = metatype $@thick ToObjcOrNotObjc.Type      // user: %6
  // function_ref ToObjcOrNotObjc.__allocating_init()
  %5 = function_ref @$s4main011ToObjcOrNotC0CACycfC : $@convention(method) (@thick ToObjcOrNotObjc.Type) -> @owned ToObjcOrNotObjc // user: %6
  %6 = apply %5(%4) : $@convention(method) (@thick ToObjcOrNotObjc.Type) -> @owned ToObjcOrNotObjc // user: %7
  store %6 to %3 : $*ToObjcOrNotObjc              // id: %7
  %8 = load %3 : $*ToObjcOrNotObjc                // users: %9, %10
  %9 = class_method %8 : $ToObjcOrNotObjc, #ToObjcOrNotObjc.performOperation : (ToObjcOrNotObjc) -> () -> Int, $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int // user: %10
  %10 = apply %9(%8) : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int
  %11 = load %3 : $*ToObjcOrNotObjc               // users: %12, %13
  %12 = class_method %11 : $ToObjcOrNotObjc, #ToObjcOrNotObjc.performOcOperation : (ToObjcOrNotObjc) -> () -> Int, $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int // user: %13
  %13 = apply %12(%11) : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int
  %14 = load %3 : $*ToObjcOrNotObjc               // users: %15, %16
  %15 = objc_method %14 : $ToObjcOrNotObjc, #ToObjcOrNotObjc.performDynamicOperation!foreign : (ToObjcOrNotObjc) -> () -> Int, $@convention(objc_method) (ToObjcOrNotObjc) -> Int // user: %16
  %16 = apply %15(%14) : $@convention(objc_method) (ToObjcOrNotObjc) -> Int
  %17 = integer_literal $Builtin.Int32, 0         // user: %18
  %18 = struct $Int32 (%17 : $Builtin.Int32)      // user: %19
  return %18 : $Int32                             // id: %19
} // end sil function 'main'

// ToObjcOrNotObjc.performOperation()
sil hidden @$s4main011ToObjcOrNotC0C16performOperationSiyF : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int {
// %0 "self"                                      // user: %1
bb0(%0 : $ToObjcOrNotObjc):
  debug_value %0 : $ToObjcOrNotObjc, let, name "self", argno 1 // id: %1
  %2 = integer_literal $Builtin.Int64, 42         // user: %3
  %3 = struct $Int (%2 : $Builtin.Int64)          // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s4main011ToObjcOrNotC0C16performOperationSiyF'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function '$sSi22_builtinIntegerLiteralSiBI_tcfC'

// ToObjcOrNotObjc.performOcOperation()
sil hidden @$s4main011ToObjcOrNotC0C18performOcOperationSiyF : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int {
// %0 "self"                                      // user: %1
bb0(%0 : $ToObjcOrNotObjc):
  debug_value %0 : $ToObjcOrNotObjc, let, name "self", argno 1 // id: %1
  %2 = integer_literal $Builtin.Int64, 42         // user: %3
  %3 = struct $Int (%2 : $Builtin.Int64)          // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s4main011ToObjcOrNotC0C18performOcOperationSiyF'

// @objc ToObjcOrNotObjc.performOcOperation()
sil hidden [thunk] @$s4main011ToObjcOrNotC0C18performOcOperationSiyFTo : $@convention(objc_method) (ToObjcOrNotObjc) -> Int {
// %0                                             // users: %4, %3, %1
bb0(%0 : $ToObjcOrNotObjc):
  strong_retain %0 : $ToObjcOrNotObjc             // id: %1
  // function_ref ToObjcOrNotObjc.performOcOperation()
  %2 = function_ref @$s4main011ToObjcOrNotC0C18performOcOperationSiyF : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int // user: %5
  strong_release %0 : $ToObjcOrNotObjc            // id: %4
  return %3 : $Int                                // id: %5
} // end sil function '$s4main011ToObjcOrNotC0C18performOcOperationSiyFTo'

// ToObjcOrNotObjc.performDynamicOperation()
sil hidden @$s4main011ToObjcOrNotC0C23performDynamicOperationSiyF : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int {
// %0 "self"                                      // user: %1
bb0(%0 : $ToObjcOrNotObjc):
  debug_value %0 : $ToObjcOrNotObjc, let, name "self", argno 1 // id: %1
  %2 = integer_literal $Builtin.Int64, 42         // user: %3
  %3 = struct $Int (%2 : $Builtin.Int64)          // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s4main011ToObjcOrNotC0C23performDynamicOperationSiyF'

// @objc ToObjcOrNotObjc.performDynamicOperation()
sil hidden [thunk] @$s4main011ToObjcOrNotC0C23performDynamicOperationSiyFTo : $@convention(objc_method) (ToObjcOrNotObjc) -> Int {
// %0                                             // users: %4, %3, %1
bb0(%0 : $ToObjcOrNotObjc):
  strong_retain %0 : $ToObjcOrNotObjc             // id: %1
  // function_ref ToObjcOrNotObjc.performDynamicOperation()
  %2 = function_ref @$s4main011ToObjcOrNotC0C23performDynamicOperationSiyF : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> Int // user: %5
  strong_release %0 : $ToObjcOrNotObjc            // id: %4
  return %3 : $Int                                // id: %5
} // end sil function '$s4main011ToObjcOrNotC0C23performDynamicOperationSiyFTo'

// ToObjcOrNotObjc.deinit
sil hidden @$s4main011ToObjcOrNotC0Cfd : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $ToObjcOrNotObjc):
  debug_value %0 : $ToObjcOrNotObjc, let, name "self", argno 1 // id: %1
  %2 = unchecked_ref_cast %0 : $ToObjcOrNotObjc to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function '$s4main011ToObjcOrNotC0Cfd'

// ToObjcOrNotObjc.__deallocating_deinit
sil hidden @$s4main011ToObjcOrNotC0CfD : $@convention(method) (@owned ToObjcOrNotObjc) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $ToObjcOrNotObjc):
  debug_value %0 : $ToObjcOrNotObjc, let, name "self", argno 1 // id: %1
  // function_ref ToObjcOrNotObjc.deinit
  %2 = function_ref @$s4main011ToObjcOrNotC0Cfd : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed ToObjcOrNotObjc) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $ToObjcOrNotObjc // user: %5
  dealloc_ref %4 : $ToObjcOrNotObjc               // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s4main011ToObjcOrNotC0CfD'

// ToObjcOrNotObjc.__allocating_init()
sil hidden [exact_self_class] @$s4main011ToObjcOrNotC0CACycfC : $@convention(method) (@thick ToObjcOrNotObjc.Type) -> @owned ToObjcOrNotObjc {
// %0 "$metatype"
bb0(%0 : $@thick ToObjcOrNotObjc.Type):
  %1 = alloc_ref $ToObjcOrNotObjc                 // user: %3
  // function_ref ToObjcOrNotObjc.init()
  %2 = function_ref @$s4main011ToObjcOrNotC0CACycfc : $@convention(method) (@owned ToObjcOrNotObjc) -> @owned ToObjcOrNotObjc // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned ToObjcOrNotObjc) -> @owned ToObjcOrNotObjc // user: %4
  return %3 : $ToObjcOrNotObjc                    // id: %4
} // end sil function '$s4main011ToObjcOrNotC0CACycfC'

// ToObjcOrNotObjc.init()
sil hidden @$s4main011ToObjcOrNotC0CACycfc : $@convention(method) (@owned ToObjcOrNotObjc) -> @owned ToObjcOrNotObjc {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $ToObjcOrNotObjc):
  debug_value %0 : $ToObjcOrNotObjc, let, name "self", argno 1 // id: %1
  return %0 : $ToObjcOrNotObjc                    // id: %2
} // end sil function '$s4main011ToObjcOrNotC0CACycfc'

sil_vtable ToObjcOrNotObjc {
  #ToObjcOrNotObjc.performOperation: (ToObjcOrNotObjc) -> () -> Int : @$s4main011ToObjcOrNotC0C16performOperationSiyF	// ToObjcOrNotObjc.performOperation()
  #ToObjcOrNotObjc.performOcOperation: (ToObjcOrNotObjc) -> () -> Int : @$s4main011ToObjcOrNotC0C18performOcOperationSiyF	// ToObjcOrNotObjc.performOcOperation()
  #ToObjcOrNotObjc.init!allocator: (ToObjcOrNotObjc.Type) -> () -> ToObjcOrNotObjc : @$s4main011ToObjcOrNotC0CACycfC	// ToObjcOrNotObjc.__allocating_init()
  #ToObjcOrNotObjc.deinit!deallocator: @$s4main011ToObjcOrNotC0CfD	// ToObjcOrNotObjc.__deallocating_deinit
}



// Mappings from '#fileID' to '#filePath':
//   'main/@objc-and-dynamic.swift' => '@objc-and-dynamic.swift'


